name: CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      Version: ${{ steps.gitversion.outputs.SemVer }}
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: 5.x
          
      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.10.2
        id: gitversion
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml
          
      - name: Display GitVersion outputs
        run: |
          echo "Version: ${{ steps.gitversion.outputs.SemVer }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build InterfaceFactory/InterfaceFactory.csproj -c Release -p:Version='${{ steps.gitversion.outputs.SemVer }}'
      - name: Build
        run: dotnet build InterfaceFactory.ContainerAdapter.DependencyInjection/InterfaceFactory.ContainerAdapter.DependencyInjection.csproj -c Release -p:Version='${{ steps.gitversion.outputs.SemVer }}'
      
      # Pack both projects
      - name: Build and Pack InterfaceFactory NuGet package
        run: dotnet pack InterfaceFactory/InterfaceFactory.csproj -p:Version='${{ steps.gitversion.outputs.SemVer }}' -c Release
      - name: Build and Pack DependencyInjection NuGet package
        run: dotnet pack InterfaceFactory.ContainerAdapter.DependencyInjection/InterfaceFactory.ContainerAdapter.DependencyInjection.csproj -p:Version='${{ steps.gitversion.outputs.SemVer }}' -c Release
      
      # Upload both packages as artifacts
      - name: Upload NuGet packages to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: nugetPackages
          path: |
            InterfaceFactory/bin/Release/*.nupkg
            InterfaceFactory.ContainerAdapter.DependencyInjection/bin/Release/*.nupkg
  
  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    permissions:
      packages: write
      contents: write
    
    steps:
      - name: Download nuget package artifacts
        uses: actions/download-artifact@v4
        with:
          name: nugetPackages
      - name: Prep packages
        run: dotnet nuget add source --username ${{ github.repository_owner }} --password ${{ secrets.GH_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
      
      # Push all packages to GitHub packages
      - name: Push packages to GitHub packages
        if: needs.build.outputs.CommitsSinceVersionSource > 0
        run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.GH_TOKEN }} --source "github"
      
      # Push all packages to Nuget.org
      - name: Push packages to Nuget.org
        if: needs.build.outputs.CommitsSinceVersionSource > 0
        run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.NUGET_API_TOKEN }} --source "https://api.nuget.org/v3/index.json"
      
      - name: Create Release
        if: needs.build.outputs.CommitsSinceVersionSource > 0
        uses: ncipollo/release-action@v1.12.0
        with:
          tag: ${{ needs.build.outputs.Version }}
          name: Release ${{ needs.build.outputs.Version }}
          artifacts: "**/*.nupkg"
          token: ${{ secrets.GITHUB_TOKEN }}
